## ** variables.yml Example **
#variables:
#  networks:
#    WAN1:
#      # List of Local Protected Subnets
#      local_subnets:
#      - {name: corp, subnet: 192.168.0.0, mask: 24}
#      - {name: voice, subnet: 192.168.1.0, mask: 24}
#      # VPN External Interface
#      ext_interface: ge-0/0/0
#      # VPN External Interface
#      ext_address: 10.1.1.10
#      # VPN External Interface Zone
#      ext_int_zone: untrust
#      # Phase 1 IKE Settings
#      phase1:
#        # DH Group
#        dh_group: group20
#        # Encryption Algorithm
#        encrypt_alg: aes-256-gcm
#        # Lifetime in Seconds
#        lifetime: 28800
#        # VPN PreShared-Key (IKE)
#        vpn_psk: xxxyyyzzz
#        # Dead Peer Detection Enabled (Comment to Disable)
#        dpd: TRUE
#        # IKE Version 2 only enabled
#        version_2: TRUE
#      phase2:
#        # Perfect Forward Secrecy, DH Group (Comment to Disable)
#        pfs: group20
#        # Encryption Algorithm
#        encrypt_alg: aes-256-gcm
#        # Lifetime in Seconds
#        lifetime: 3600
#      remote_sites:
#        SITE1:
#          # The Remote Gateway/Endpoint Public IP Address
#          remote_gw_address: 10.1.1.11
#          # NAT Traversal Disabled (Comment to Enable)
#          #no_nat_t: TRUE
#          # Set the logical interface ID for st0 tunnel interface
#          logical_int: 1
#          # Set the Tunnel Interface CIDR
#          tunnel_int_ip: 192.168.99.1/31
#          neighbour_ip: 192.168.99.2
#          # List of Remote Protected Subnets
#          remote_subnets: 
#          - {name: corp, subnet: 192.168.10.0, mask: 24}
#          - {name: voice, subnet: 192.168.11.0, mask: 24}
#        SITE2:
#          remote_gw_address: 10.1.1.12
#          no_nat_t: TRUE
#          logical_int: 2
#          tunnel_int_ip: 192.168.99.3/31
#          neighbour_ip: 192.168.99.4
#          remote_subnets: 
#          - {name: corp, subnet: 192.168.20.0, mask: 24}
#          - {name: voice, subnet: 192.168.21.0, mask: 24}
#      options:
#        # Instruct the Jinja Templte to include basic security policies... (Comment to Disable)
#        security_policies: TRUE
#        # Instruct the template to allow intra-traffic between remote networks, such as in Hub-Spoke model. (Comment to Disable)
#        hub_spoke: TRUE
#        routing_protocol: 
#          # Select routing protocol to be configured, (this already assumes protocol is configured) adds st0 interface and routes (Choose: static or ospf)
#          type: ospf
#          area: 0
#          # Authentication password for routing protocol (Comment to disable)
#          authentication_hash: Juniper123
#    CUST1:
#      # List of Local Protected Subnets, to share with partner
#      local_subnets:
#      - {name: server1, subnet: 192.168.2.51, mask: 32}
#      - {name: server2, subnet: 192.168.2.52, mask: 32}
#      ext_interface: ge-0/0/0
#      ext_address: 10.1.1.10
#      ext_int_zone: untrust
#      phase1:
#        dh_group: group20
#        encrypt_alg: aes-256-gcm
#        lifetime: 28800
#        vpn_psk: xxxyyyzzz
#        dpd: TRUE
#        version_2: TRUE
#      phase2:
#        pfs: group20
#        encrypt_alg: aes-256-gcm
#        lifetime: 3600
#      remote_sites:
#        CUSTSITE1:
#          remote_gw_address: 10.1.1.21
#          #no_nat_t: TRUE
#          logical_int: 101
#          tunnel_int_ip: 192.168.99.101/30
#          neighbour_ip: 192.168.99.102
#          remote_subnets: 
#          - {name: server1, subnet: 172.16.100.10, mask: 32}
#          - {name: server2, subnet: 172.16.101.11, mask: 32}
#      options:
#        security_policies: TRUE
#        hub_spoke: FALSE
#        routing_protocol: 
#          type: bgp
#          peer_as: 72
#

groups { {% for network in networks %}
    replace: ipsec-{{ network }} {
        security {
            ike {
                proposal IKE_{{ network }}_PROPOSAL {
                    authentication-method pre-shared-keys;
                    dh-group {{ networks[network].phase1.dh_group }};
                    encryption-algorithm {{ networks[network].phase1.encrypt_alg }};
                    lifetime-seconds {{ networks[network].phase2.lifetime }};
                }
                policy IKE_{{ network }}_POLICY {
                    mode main;
                    proposals IKE_{{ network }}_PROPOSAL;
                    pre-shared-key ascii-text {{ networks[network].phase1.vpn_psk }};
                } {% for remote_site in networks[network].remote_sites %}
                gateway {{ network }}_{{ remote_site }}_GW {
                    ike-policy IKE_{{ network }}_POLICY;
                    address {{ networks[network].remote_sites[remote_site].remote_gw_address }}; {% if networks[network].phase1.dpd %}
                    dead-peer-detection; {% endif %} {% if remote_site.no_nat_t %}
                    no-nat-traversal; {% endif %}
                    external-interface {{ networks[network].ext_interface }};
                    local-address {{ networks[network].ext_address}}; {% if networks[network].phase1.version_2 %}
                    version v2-only; {% endif %}
                } {% endfor%}
            }
            ipsec {
                proposal IPSEC_{{ network }}_PROPOSAL {
                    protocol esp;
                    encryption-algorithm {{ networks[network].phase2.encrypt_alg }};
                    lifetime-seconds {{ networks[network].phase2.lifetime }};
                }
                policy IPSEC_{{ network }}_POLICY { {% if networks[network].phase2.pfs %}
                    perfect-forward-secrecy {
                        keys {{ networks[network].phase2.pfs }};
                    } {% endif %}
                    proposals IPSEC_{{ network }}_PROPOSAL;
                } {% for remote_site in network.remote_sites %}
                vpn {{ network }}_{{ remote_site }}_VPN {
                    bind-interface st0.{{ logical_int }};
                    ike {
                        gateway {{ network }}_{{ remote_site }}_GW;
                        ipsec-policy IPSEC_{{ network }}_POLICY;
                    }
                } {% endfor %}
            }
            flow {
                tcp-mss {
                    ipsec-vpn {
                        mss 1460;
                    }
                }
            }
            zones {
                security-zone {{ network }} {
                    interfaces { {% for remote_site in networks[network].remote_sites %}
                        st0.{{ networks[network].remote_sites[remote_site].logical_int }} {
                            host-inbound-traffic {
                                system-services {
                                    ping;
                                }
                            }
                        } {% endfor %}
                    }
                }
                security-zone {{ networks[network].ext_int_zone }} {
                    interfaces {
                        {{ networks[network].ext_interface}} {
                            host-inbound-traffic {
                                system-services {
                                    ike;
                                }
                            }
                        }
                    }
                }
            } {% if networks[network].options.security_policies %}
            policies {
                global {
                    policy {{ network }}_TO_LOCALNETS {
                        match {
                            from-zone {{ network }};
                            source-address {{ network }}_REMOTE_SUBNETS;
                            destination-address {{ network }}_ALLOWED_LOCALNETS;
                            application any;
                        }
                        then {
                            permit;
                        }
                    }
                    policy LOCALNETS_TO_{{ network }} {
                        match {
                            to-zone {{ network }};
                            source-address {{ network }}_ALLOWED_LOCALNETS;
                            destination-address {{ network }}_REMOTE_SUBNETS;
                            application any;
                        }
                        then {
                            permit;
                        }
                    } {% if networks[network].options.hub_spoke %}
                    policy {{ network }}_TO_{{ network }}_HUB {
                        match {
                            from-zone {{ network }};
                            to-zone {{ network }};
                            source-address any;
                            destination-address any;
                            application any;
                        }
                        then {
                            permit;
                        }
                    } {% endif %}
                }
            }
            address-book {
                global { {% for subnet in networks[network].local_subnets %}
                    address LOCAL_SUBNET_{{ subnet.name }} {{ subnet.subnet }}/{{ subnet.mask }}; {% endfor %} 
                    address-set {{ network }}_ALLOWED_LOCALNETS { {% for subnet in networks[network].local_subnets %}
                        address LOCAL_SUBNET_{{ subnet.name }}; {% endfor %}
                    } {% for remote_site in networks[network].remote_sites %} {% for remote_subnet in networks[network].remote_sites[remote_site].remote_subnets %}
                    address REMOTE_{{ network }}_{{ remote_site }}_{{ remote_subnet.name }} {{ remote_subnet.subnet }}/{{ remote_subnet.mask }}; {% endfor %} {% endfor %}
                    address-set {{ network }}_REMOTE_SUBNETS { {% for remote_site in networks[network].remote_sites %} {% for remote_subnet in networks[network].remote_sites[remote_site].remote_subnets %}
                        address REMOTE_{{ network }}_{{ remote_site }}_{{ remote_subnet.name }}; {% endfor %} {% endfor %}
                    }
                }
            } {% endif %}
        }
        interfaces {
            st0 { {% for remote_site in networks[network].remote_sites %}
                unit {{ networks[network].remote_sites[remote_site].logical_int }} {
                    family inet {
                        address {{ networks[network].remote_sites[remote_site].tunnel_int_ip }};
                    }
                } {% endfor %}
            }
        } {% if networks[network].options.routing_protocol.type == 'ospf' %}
        protocols {
            ospf {
                area 0.0.0.{{ networks[network].options.routing_protocol.area }} { {% for remote_site in networks[network].remote_sites %}
                    interface st0.{{ networks[network].remote_sites[remote_site].logical_int }} {% if networks[network].options.routing_protocol.authentication_hash %} {
                        authentication {
                            simple-password {{ networks[network].options.routing_protocol.authentication_hash }};
                        } {% endif %}
                    } {% endfor %}
                }
            } 
        } {% endif %} {% if networks[network].options.routing_protocol.type == 'bgp' %}
        protocols {
            bgp {
                group ext-{{ network }} {
                    type external; {% if networks[network].options.routing_protocol.authentication_hash %}
                    authentication-key {{ networks[network].options.routing_protocol.authentication_hash }}; {% endif %}
                    peer-as {{ networks[network].options.routing_protocol.peer_as }}; {% for remote_site in networks[network].remote_sites %}
                    neighbor {{ networks[network].remote_sites[remote_site].neighbour_ip }} {
                        description {{ network }}_{{ remote_site }}_AS{{ networks[network].options.routing_protocol.peer_as }};
                    } {% endfor %}
                }
            } 
        } {% endif %} {% if networks[network].options.routing_protocol.type == 'static' %}
        routing-options {
            static { {% for remote_site in networks[network].remote_sites %} {% for remote_subnet in networks[network].remote_sites[remote_site].remote_subnets %}
                route {{ remote_subnet.subnet }}/{{ remote_subnet.mask }} next-hop {{ networks[network].remote_sites[remote_site].neighbour_ip }}; {% endfor %} {% endfor %}
            }
        } {% endif %}
    } {% endfor %}
}
apply-groups [ {% for network in networks %}ipsec-{{ network }} {% endfor %}];